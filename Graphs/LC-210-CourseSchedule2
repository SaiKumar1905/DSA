class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
       ArrayList<Integer> []adj=new ArrayList[numCourses];
        for(int i=0;i<numCourses;i++){
            adj[i]=new ArrayList<>();
        }
        for(int []pre:prerequisites){
            adj[pre[0]].add(pre[1]);
        }
        
        int [] vis=new int[numCourses];
       // int [] res=new int[numCourses];
        List<Integer> list = new ArrayList<>();
        for(int i=0;i<numCourses;i++){
            if(!dfs(i,vis,adj,list)){
               int arr[] = new int[0];
               return arr;
            }
        }
        int[] ans = list.stream().mapToInt(i->i).toArray();
        
        return ans;
        
        
    }
    public boolean dfs(int node,int[] vis,ArrayList<Integer>adj[],List<Integer> list){
        if(vis[node]==1){
         //   int arr[] = new int[0];
             return false;
        }
        if(vis[node]==2){
            return true;
        }
        vis[node]=1;
        for(int x:adj[node]){
            if(!dfs(x,vis,adj,list)){
        
             return false;
            }
        }
        vis[node]=2;
       list.add(node);
        return true;
    }
}
